name: "davidbornitz.dev Change Pipeline"
 
on:
 push:
   branches:
   - main
 pull_request:
   branches:
   - main
 
env:
 # verbosity setting for Terraform logs
 TF_LOG: INFO
 # Credentials for deployment to AWS
 AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
 AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
 # S3 bucket for the Terraform state
 BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE}}
 TERRAFORM_VERSION: 1.6.6
 TERRAGRUNT_VERSION: 0.55.0
 
jobs:
  davidbornitz-build:
    name: "Build davidbornitz.dev"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
    - uses: actions/checkout@v3

    - name: Use Node.js 18.x
      uses: actions/setup-node@v3
      with:
        node-version: 18.x

    - name: BuildInvitation
      working-directory: invitationApp
      run: |
        npm install
        yarn build:frontend

    - name: Setup Terraform with specified version on the runner
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: $TERRAFORM_VERSION
        terraform_wrapper: false

    - name: Setup Terragrunt
      run: |
        mkdir bin
        wget -q -O bin/terragrunt https://github.com/gruntwork-io/terragrunt/releases/download/v$TERRAGRUNT_VERSION/terragrunt_linux_amd64
        chmod +x bin/terragrunt
        echo "${{ github.workspace }}/bin" >> $GITHUB_PATH
  
    - name: Terragrunt init
      id: init
      run: |
        terragrunt init
      continue-on-error: true

    - name: Terragrunt format
      id: fmt
      run: terragrunt fmt -check
  
    - name: Terragrunt validate
      id: validate
      run: terragrunt validate

    - name: Terragrunt plan
      id: plan
      if: github.event_name == 'pull_request'
      run: |
        echo 'plan<<EOF' >> $GITHUB_OUTPUT
        terragrunt plan -input=false -no-color | grep -E '(^.*[#~+-] .*|^[[:punct:]]|Plan)' >> $GITHUB_OUTPUT
        echo 'EOF' >> $GITHUB_OUTPUT
      continue-on-error: true
  
    - uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        script: |
          const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
          #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
          #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${{ steps.plan.outputs.plan }}
          \`\`\`

          </details>
          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terragrunt Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Terragrunt Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terragrunt apply -auto-approve -input=false